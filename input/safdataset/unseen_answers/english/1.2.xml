<?xml version='1.0' encoding='utf-8'?>
<question id="1.2">
  <questionText>Consider the following scenario: You are browsing the web for a very specific and important piece of information. However, you are not quite sure how to find it and adopt an iterative process of refining your query after every search, depending on the shown results and a skim of the first few websites. Is it better to use a connection-oriented or connectionless service for your communication in this scenario? Explain your answer in 1-4 sentences.</questionText>
  <referenceAnswers>
    <referenceAnswer id="1.2.a1">Connectionless, because you will communicate with various partners (websites) for short periods of time. If you would initiate a connection with every website you skim, that would incur a lot of overhead in the connecting and disconnecting phase, just to have very short data transfers.</referenceAnswer>
  </referenceAnswers>
  <studentAnswers>
    <studentAnswer id="1.2.2">
      <response>A connection-oriented service would be a better fit for this scenario since there are multiple refined queries by the user and since the process is assumed to be time intensive the handshake overhead can be expected to be insignificant.
However, the time delta between queries could vary by quite a bit and hence one could argue, that a connectionless service could be beneficial for the query provider since this could save resources for him and a query does not need to provide such harsh requirements in reliability and time as e.g. a video call.</response>
      <response_feedback>Correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.127">
      <response>As it is highlighted that the data we are searching for is very important and specific, I would suggest a connection-oriented service. Such a service would be more reliable and would avoid data loss. On the other hand, a connectionless service would make rapid re-searching easier, as there is no connection-establishment and -teardown phase. As qualitative, complete information seems more important I would suggest a connection-oriented service.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.95">
      <response>Since it is an iterative process with many iterations, we need to put many inquiries through the network. By the sheer amount of inquiries, the small overhead of establishig and tearing down connections in connection-oriented communication will add up to a bigger decline of performance as opposed to connection-less. Also it is not important for either side to know the state of the respective other side, so no actual need for connection-oriented.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.6">
      <response>Since I am looking for a very specific important piece of information, it should be guaranteed that the information I receive at the end is correct. A connection-oriented service is a more reliable connection service because it guarantees data packets transfer from one end to the other end with a connection. Furthermore, it is also beneficial for our multiple searches, because there is no congestion as it provides an end-to-end connection between sender and receiver during transmission of data.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.123">
      <response>For this specific use-case it is better to use a connection-oriented service. First, the associated state of the connection could be used for the iterative process. Secondly, since the requested information is important we want some kind of reliability which can be provided by connection-oriented transport protocols like TCP. Transmission overhead compared to the connectionless service can be disregarded since it is insignificant in this case of a longer connection/communication.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.37">
      <response>Connection-oriented service is better due to the importance of the information so in this waz will be losed.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.93">
      <response>I would go for a connectionless service. The advantages that a connection-oriented service offers can not really be used.  There is no real state between the different request, as for each query, the user receives a straight answer. Furthermore, the refining of the query is done user side and a new connection is opened up each request anyways. Therefore the user can save bandwidth by using a connectionless service.</response>
      <response_feedback>The response is correct</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.152">
      <response>A connection-oriented service (e.g. TCP) is required, which establishes and maintains the connection to transfer the information which then gets acknowledged and releases the connection once finished. A connectionless service (e.g. UDP) does not require a handshake and sends data without acknowledgements.</response>
      <response_feedback>The response does not explain the requirement based upon the given scenario.</response_feedback>
      <score>0.0</score>
      <verification_feedback>Incorrect</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.45">
      <response>I would choose a connectionless service, because it is faster and for me it is not so problematic if a paket is faulty. But there is a disadventage: If I send a lot of requests, it may be worthwhile to establish a connection. Then the costs for connection setup, data transmission and connection termination are no longer a factor. So it depends on the situation.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.156">
      <response>I would prefer a connection-oriented approach in this case, but it's possible to make arguments for both systems. The short "bursty" communication is an argument for connectionless, but on the other hand this situation also behaves like a conversation, where you send something and then wait for the answer, what makes a connection-oriented service.
A reliable connection is also often assumed when talking about connection-oriented, what makes me say that connection-oriented would be better for this communication.</response>
      <response_feedback>The correct answer is connectionless service as the request-reply process also works here.Â While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.100">
      <response>The advantage of a connectionless service is the qiucker establishment of a connection due to the missing connection establishment and connection teardown phase. Regarding an iterative process which takes a lot of repetitions saving time could be a significant factor. The advantage of connection oriented services on the other hand lies within the connection establishment and connection teardown phase. The handshake enables a reliable communication between client and server, since if connected, both are ready to communicate. This can be of special importance in a giant network like the internet, where data has to travel large distances since servers can be located anywhere. Since a failed connection can probably cost more time than it is saved by avoiding handshakes and teardown phases, it would be better to use a connection oriented service in this scenario.</response>
      <response_feedback>Since most of the communication occurs when connecting to presumably different web servers and the content is merely skimmed over, connectionless communication is better overall since it does not cause unnecessary overhead for connection setup.</response_feedback>
      <score>1.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.125">
      <response>In this case a connectionless service would be better because it may be necessary to connect to a large amount of websites.  In this case the connection-oriented service would be more time costing.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.159">
      <response>I think, it is better to use connection-oriented for my communication in this scenario.  Because the user needs a stable connection for the specific and important piece of inofrmation. Additionally, using a established connection is necessary for the iterative process. Because connectionless service does not maintain connection state.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access. There is no need to maintain aÂ persistent state between subsequent questions.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.23">
      <response>I would choose a connection-oriented  service because i would want to ensure that the whole piece of information is transferred because it features no loss, no duplication and no sequencing error. In a connectionless service it wouldn't be reliable enough as there is no inherit sequencing nor loss correction though the latter depends on if its a confirmed connectionless service or unconfirmed.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.151">
      <response>Neither type of service is better or worse in this scenario for the user, unless the network itself is overloaded, in which case a connectionless service would be advantageous. For the server providing the search engine on the other hand, a connectionless service is advantageous, since the service must be provided for many users and each user may send multiple, independent queries, resulting in an overhead for connection build-up and tear-down.</response>
      <response_feedback>The reasoning is not limited to the congestion scenario but since skimming and searching will require data for a short period of time, maybe from different servers, connectionless service is better in this regard.</response_feedback>
      <score>1.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.36">
      <response>In this scenario it would be better to use a connection-oriented service, as the overhead of the the connection setup/handshake is negligible in a communication that is longer. The benefit of using a conenction-oriented service is better service.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.0</score>
      <verification_feedback>Incorrect</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.133">
      <response>It is better to use a connection-less service. I search for iteratively more specific information and receive a reply to each question. However the search engine doesn't need to persist state between subsequent questions therefore a connection is unnecessary.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.145">
      <response>A connectionless service is better because of the stateless communication. It provides a faster and more scalable communication system that can speed up the iterative process. Also, there is no need for a "real" channel, as only the website information is requested. Even if the network is busy, communication can take place since the information to be retrieved is not time critical.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.130">
      <response>Es ist besser einen verbindungslosen Service zu Benutzen, da</response>
      <response_feedback>No explanation for the service type chosen provided.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.56">
      <response>Connectionless, because we don't need a long stable connection, as I simply skim through the first results and then enter a new query.
The overhead for a connection-oriented service might be too high, so connectionless makes more sense for the small queries.
Furthermore, if many other users searched for things at the same time (and thus the network is congested), connectionless would still allow me to communicate (albeit slower).</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.24">
      <response>I would choose a connection-oriented  service because i would want to ensure that the whole piece of information is transferred because it features no loss, no duplication and no sequencing error. In a connectionless service it wouldn't be reliable enough as there is no inherit sequencing nor loss correction though the latter depends on if its a confirmed connectionless service or unconfirmed.</response>
      <response_feedback>While the stated points are true and maybe good to have once we have reached our desired website but our goal for the current scenario is to skim and reach the desired website first, which should ideally be quick when one is jumping from one website to another rather establishing time-consuming connection and teardown with each, in such case connectionless is a better option for faster access.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.113">
      <response>It is better to use connectionless communication since i will go through many websites searching for the right information but the only time i need to communicate with the server is when i send it my request. Afterwards i will get send the information and we dont need and established communication. Another reason is that this way the server can handle a lot more users since it does not need to maintain communication with every user.</response>
      <response_feedback>The response is correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.92">
      <response>Connectionless service. This service not only supports long communications but will still communicate despite congestion.Thus, despite the number of queries raised communication will still occur, although it may be delayed.</response>
      <response_feedback>The stated advantages are correct but it does not answer what one should use when we just need to skim the websites, as in such cases connectionless will cause less overhead compared to connection-oriented as we just need very short data transfer.</response_feedback>
      <score>1.0</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.124">
      <response>When refining a search query, this iterative process in each iteration builds upon the results of the preceding steps. A connection-oriented service is able to preserve such kind of results (i.e., the query from the previous iteration) while a connectionless service can't do this. By that, in each iteration, only the latest refinement needs to be transmitted and the previous query does not need to be preserved by the client. In web application this kind of service is often realized through sessions.</response>
      <response_feedback>The query is readjusted by the user based upon the results obtained in the previous search, for example, the user enters specific words he is searching for which he got from the previous search results so the need for connection-oriented does not arise.</response_feedback>
      <score>0.5</score>
      <verification_feedback>Partially correct</verification_feedback>
    </studentAnswer>
    <studentAnswer id="1.2.117">
      <response>Connectionless service is better because you don't need to wait for the other side of the connection to accept the connection. so it doesn't need the connection establishment(three-phase) each time. communication partners can communicate even when the network is congested, however, the connection can be stall.</response>
      <response_feedback>Correct.</response_feedback>
      <score>2.0</score>
      <verification_feedback>Correct</verification_feedback>
    </studentAnswer>
  </studentAnswers>
</question>
